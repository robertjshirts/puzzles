// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for PuzzleType.
const (
	Clock    PuzzleType = "clock"
	Megaminx PuzzleType = "megaminx"
	N2x2     PuzzleType = "2x2"
	N3x3     PuzzleType = "3x3"
	N4x4     PuzzleType = "4x4"
	N5x5     PuzzleType = "5x5"
	N6x6     PuzzleType = "6x6"
	N7x7     PuzzleType = "7x7"
	N8x8     PuzzleType = "8x8+"
	Other    PuzzleType = "other"
	Pyraminx PuzzleType = "pyraminx"
	Skewb    PuzzleType = "skewb"
	Square1  PuzzleType = "square-1"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// NewOrderInfo defines model for NewOrderInfo.
type NewOrderInfo struct {
	// Address The address of the customer
	Address string   `json:"address"`
	Items   []Puzzle `json:"items"`

	// Name The name of the customer
	Name string `json:"name"`

	// PaymentInfo The payment information
	PaymentInfo PaymentInfo `json:"paymentInfo"`

	// ShippingInfo The shipping information
	ShippingInfo ShippingInfo `json:"shippingInfo"`
}

// OrderInfo defines model for OrderInfo.
type OrderInfo struct {
	// Address The address of the customer
	Address string `json:"address"`

	// Id The ID of the order
	Id    string   `json:"id"`
	Items []Puzzle `json:"items"`

	// Name The name of the customer
	Name string `json:"name"`

	// PaymentInfo The payment information
	PaymentInfo PaymentInfo `json:"paymentInfo"`

	// ShippingInfo The shipping information
	ShippingInfo ShippingInfo `json:"shippingInfo"`
}

// PaymentInfo The payment information
type PaymentInfo struct {
	// AreaCode The area code of the card owner
	AreaCode string `json:"areaCode"`

	// CardNumber The card number
	CardNumber string `json:"cardNumber"`

	// Cvv The CVV
	Cvv string `json:"cvv"`

	// Date The expiration date
	Date *string `json:"date,omitempty"`
}

// Puzzle A puzzle
type Puzzle struct {
	// Description A description of the puzzle
	Description string `json:"description"`

	// Id The ID of the puzzle
	Id string `json:"id"`

	// Name The name of the puzzle
	Name string `json:"name"`

	// Price The price of the puzzle
	Price float64 `json:"price"`

	// Type The type of puzzle
	Type PuzzleType `json:"type"`
}

// PuzzleType The type of puzzle
type PuzzleType string

// ShippingInfo The shipping information
type ShippingInfo struct {
	// Address The address of the recipient
	Address string `json:"address"`

	// AreaCode The area code of the recipient
	AreaCode string `json:"areaCode"`

	// City The city of the recipient
	City string `json:"city"`

	// Country The country of the recipient
	Country string `json:"country"`

	// Name The name of the recipient
	Name string `json:"name"`

	// State The state of the recipient
	State string `json:"state"`
}

// CreateNewCartJSONRequestBody defines body for CreateNewCart for application/json ContentType.
type CreateNewCartJSONRequestBody = NewOrderInfo

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWTXPbOAz9Kxzs3paJ5SRNO7p10z3kkmYmmV4yOTASbLOVSBakYrkZ/fcdUPKXJDvu",
	"TE+iBODx4REA9QaZLZ01aIKH9A18tsBSxeV/RJZ44cg6pKAxfs5sjvwMK4eQgjYB50jQSCjRezXfNfpA",
	"2syhaSQQ/qw0YQ7pUwux9X+Wa3/78h2zwFh3uPxKOdKtmdkhB5XnhD4uc/QZaRe0NZDC4wJFZxR2JsIC",
	"RVb5YEskkH1WEnTAMqJsFn8TziCFvyZbWSadJpP76tevAjmuA1JEasXvRpU4ToYtpzBxalWiCet0j9LY",
	"cW0k+IV2Tpv5KaEPu779U2k16JKRG417O+xTHTu6vXNTRfF1BunTcV57p93I/nHrfFzc2y9raS1HD3Vt",
	"GGsvxxyem2c5ghURhDYzS6WK30dSu98/pSFKp00Pp1e8hOqma6KR6iVUghtkUzWKcmGXZrxu2HpXlS9I",
	"43Ax2rQOY+Gvr+NxN9++jfnnKhzgjbXTFBMW0Um+NwO2xCVsg7+0scxLbpUaK7OuGwdkPgvXWvq677kN",
	"o3be19JvgIaD492KPBx72rA4HO9IZwcAommAUKpal1UJ6TRJkkRCqU37zuuqCNoVyE2anCfTzX6bmqnP",
	"5vas+zgrrArXV9sReMrAfGTPwbDJt5MmQu335DrLwwf/2O0/FIEDWINN/mg42Se4qC9AwmV9CRKu6iuQ",
	"8KH+ABKu62uQ8LH+CBI+1Z/+4d1XpEpt6nhLzddL/wOXL/z8WSnCsykXamGzHyDBhgXSDt3tcT305vOQ",
	"8Hq+Hp8av3HlEWbaaTRhrHx+c/wcxcp0WB2YOzqsToOwlQl0CKU1ngR0WlsdhfDh4HiLphNAemU+uEs3",
	"6nfirTfdCjEseQbVXfUEHXjodU0gbhQF8YD0ys0i4RXJt5yT8+R8yjlZh0Y5DSlcnk/Pk3h/h0Wso0l7",
	"a/LflfWBn1xwsfxuc0jhhlAFvMMl7wJtYujDvzZftT+CJrAGXJzOFTqLkZPvvp2v7RB4b0Ts3/yc6VD7",
	"+GMiguUy50d3K8ZhQOidNb7tkYtk+seIvcuKGYil8iKLMuXxesSZqorwx0i0v+AjBD4bgWwTNssq4mJj",
	"H1+VpeJegvtCZSiUMLjs/o3Y3h745E3nDaRvTdP8HwAA//9nDhoT/gsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
