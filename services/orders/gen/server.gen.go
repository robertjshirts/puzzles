// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for OrderStatus.
const (
	Cancelled OrderStatus = "cancelled"
	Placed    OrderStatus = "placed"
)

// Defines values for PuzzleType.
const (
	Clock    PuzzleType = "clock"
	Megaminx PuzzleType = "megaminx"
	N2x2     PuzzleType = "2x2"
	N3x3     PuzzleType = "3x3"
	N4x4     PuzzleType = "4x4"
	N5x5     PuzzleType = "5x5"
	N6x6     PuzzleType = "6x6"
	N7x7     PuzzleType = "7x7"
	N8x8     PuzzleType = "8x8+"
	Other    PuzzleType = "other"
	Pyraminx PuzzleType = "pyraminx"
	Skewb    PuzzleType = "skewb"
	Square1  PuzzleType = "square-1"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// NewOrderInfo defines model for NewOrderInfo.
type NewOrderInfo struct {
	Items []Puzzle `json:"items"`

	// Name The name of the customer
	Name string `json:"name"`

	// PaymentInfo The payment information
	PaymentInfo PaymentInfo `json:"paymentInfo"`

	// ShippingInfo The shipping information
	ShippingInfo ShippingInfo `json:"shippingInfo"`
}

// OrderInfo defines model for OrderInfo.
type OrderInfo struct {
	// Id The ID of the order
	Id    string   `json:"id"`
	Items []Puzzle `json:"items"`

	// Name The name of the customer
	Name string `json:"name"`

	// PaymentInfo The payment information
	PaymentInfo PaymentInfo `json:"paymentInfo"`

	// ShippingInfo The shipping information
	ShippingInfo ShippingInfo `json:"shippingInfo"`

	// Status The status of the order
	Status OrderStatus `json:"status"`
}

// OrderStatus The status of the order
type OrderStatus string

// PaymentInfo The payment information
type PaymentInfo struct {
	// AreaCode The area code of the card owner
	AreaCode string `json:"areaCode"`

	// CardNumber The card number
	CardNumber string `json:"cardNumber"`

	// Cvv The CVV
	Cvv string `json:"cvv"`

	// Expiration The expiration date
	Expiration string `json:"expiration"`
}

// Puzzle A puzzle
type Puzzle struct {
	// Description A description of the puzzle
	Description string `json:"description"`

	// Id The ID of the puzzle
	Id string `json:"id"`

	// Name The name of the puzzle
	Name string `json:"name"`

	// Price The price of the puzzle
	Price float64 `json:"price"`

	// Type The type of puzzle
	Type PuzzleType `json:"type"`
}

// PuzzleType The type of puzzle
type PuzzleType string

// ShippingInfo The shipping information
type ShippingInfo struct {
	// Address The address of the recipient
	Address string `json:"address"`

	// AreaCode The area code of the recipient
	AreaCode string `json:"areaCode"`

	// City The city of the recipient
	City string `json:"city"`

	// Country The country of the recipient
	Country string `json:"country"`

	// Name The name of the recipient
	Name string `json:"name"`

	// State The state of the recipient
	State string `json:"state"`
}

// CreateNewOrderJSONRequestBody defines body for CreateNewOrder for application/json ContentType.
type CreateNewOrderJSONRequestBody = NewOrderInfo

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check the health of the service
	// (GET /health)
	CheckHealth(c *gin.Context)
	// Place a new order
	// (POST /orders)
	CreateNewOrder(c *gin.Context)
	// Delete an order by ID
	// (DELETE /orders/{id})
	DeleteOrder(c *gin.Context, id string)
	// Get order details by ID
	// (GET /orders/{id})
	GetOrder(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CheckHealth operation middleware
func (siw *ServerInterfaceWrapper) CheckHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckHealth(c)
}

// CreateNewOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateNewOrder(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNewOrder(c)
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrder(c, id)
}

// GetOrder operation middleware
func (siw *ServerInterfaceWrapper) GetOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrder(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.CheckHealth)
	router.POST(options.BaseURL+"/orders", wrapper.CreateNewOrder)
	router.DELETE(options.BaseURL+"/orders/:id", wrapper.DeleteOrder)
	router.GET(options.BaseURL+"/orders/:id", wrapper.GetOrder)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWS3PbNhD+K5htb2Us+hEno1trd1JfEs/Yk4vHB5hcSYhJAAFAm4qH/72zACiJL1md",
	"ph2f+MBi8e23ux/2BTJVaiVROgvzF7DZCkvuX/80Rhl60UZpNE6g/52pHOnp1hphDkI6XKKBJoESreXL",
	"3UXrjJBLaJoEDH6vhMEc5nfBxdb+Pmnt1cM3zBz5+ozPX0yO5kou1BCDcFh2X341uIA5/DLbhjOLscyu",
	"qx8/CiSv8RhuDF/Tt+Slh5ujzYzQTigJc7hdIaMVphbMrZBllXWqRANJP64ENF+XKF0Lcy+MHdMmAbsS",
	"Wgu5PGTrza5tn83AQQym57cLcIzoDsu8KL4sYH63H00nN00ySE4+TunVZUuoot1jbFrHXfVqPv3hN8G0",
	"aQhAh44cNo7um/tkBIk/nwm5UKbk/v8UMTcbQEMv4Yx+TCirkmDogmdIUDIuMywKzHfo30Z83a2f4Skx",
	"fz20Xca5QX4R23LogVYZtdymnrnJmXqW4zmg1c9V+YBm3J3fLYPB2Panp/F9F1+/jtljrYUJYY1u266z",
	"nDscuuhryxZ+x3lAlmy5GmuGqBQDIL8zHVb6zHfMhrt2vlvyN44GTLzeN9N7DxOy6f3aiGzCgV8aeCh5",
	"LUqq9OM0TdMESiHDN71XhRO6QJKS9Cg93py3qZr63VK9iz8XheLu/Gwrz4eI+S1ZDoQw36qgd9Xt/TbK",
	"6cTfxvOHJNAG4mATf9vmJ/UJJHBan0ICZ/UZJPC+fg8JnNfnkMCH+gMk8LH++Budvja8FLL2N9+yfbWP",
	"+PxAz+8VN/jumAq1UNkjJKDcCs2oatz07o4RcYoW+3Ujzw3aCXmLi23mDWZCC5RurHz+oQDt9ZUJt55Q",
	"HuHWh7lQlXRmyktYPMjRYW211wXdEjh9gRzipFfmscLb5O2wH8lrD90SMSx5cipi9TjhSPRiE7ALbhy7",
	"QfNEzZLAExobMKdH6dExxaQ0Sq4FzOH0KD069VOGW/k6mq2QF25Fr0t09KCC8+V3lcMcLlaYPf4VbCgs",
	"q5W0oRpP0nSCp4CFCcuCdz+75bjgVeHCSCodMUclrXUhMn/e7JsNqhyk4zVhCeOuJ6Yn45IhrTGVZZWh",
	"JJCNrcqSU42FkHwOA7o2oxG2t5758cCHqZUd48Ugd9hOVhAyjtb9ofL1TwuxO7gNIyWy/TTJnKL+p0cc",
	"GLxK9tJ1/NOAvYqKELBnblnmecrfVAFc06jHOJP4HMfAnZTPXkTehLouMChBN/OX/n+bds0NL9H5Wrk7",
	"YIqmFEXP1NAw963Y3oPzcCdu1cOZCpMdPvpKcz9I8tl4T4bDKSPh9LeVkcAp4zLifFizq0tCOKpJn9D9",
	"G/oNOiPw6b9KQPr/dVks3jeUyE/oItE5Oi4K26ayaZq/AwAA//8BGkSIuxAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
