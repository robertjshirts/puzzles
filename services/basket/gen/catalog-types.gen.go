// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for PuzzleType.
const (
	Clock    PuzzleType = "clock"
	Megaminx PuzzleType = "megaminx"
	N2x2     PuzzleType = "2x2"
	N3x3     PuzzleType = "3x3"
	N4x4     PuzzleType = "4x4"
	N5x5     PuzzleType = "5x5"
	N6x6     PuzzleType = "6x6"
	N7x7     PuzzleType = "7x7"
	N8x8     PuzzleType = "8x8+"
	Other    PuzzleType = "other"
	Pyraminx PuzzleType = "pyraminx"
	Skewb    PuzzleType = "skewb"
	Square1  PuzzleType = "square-1"
)

// Basket A basket
type Basket struct {
	// Id The ID of the basket
	Id string `json:"id"`

	// Items The items in the basket
	Items []Puzzle `json:"items"`
}

// Error An error response
type Error struct {
	// Code A code representing the error
	Code int32 `json:"code"`

	// Message A message describing the error
	Message string `json:"message"`
}

// Puzzle defines model for Puzzle.
type Puzzle struct {
	// Description A description of the puzzle
	Description string `json:"description"`

	// Id The ID of the puzzle
	Id string `json:"id"`

	// Name The name of the puzzle
	Name string `json:"name"`

	// Price The price of the puzzle
	Price float64 `json:"price"`

	// Quantity The number of puzzles added to the basket
	Quantity int `json:"quantity"`

	// Type The type of puzzle
	Type PuzzleType `json:"type"`
}

// PuzzleType The type of puzzle
type PuzzleType string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWT3PbthP9Kpj9/W6lLcp2nAxvdtxmdGk7rW+eHCByJSEmABpY2lQ0+u6dBUj9I1V7",
	"aqfjQ0+iAOzi7Xtvl1xBbnVlDRrykK3A5wvUMjxeS3+PxE8F+typipQ1kMGVmMadBCpnK3SkMASoon/4",
	"doFiciPsTNACt4G0rBAy8OSUmcM6AUWo/XB42BLK7GfYBPzf4Qwy+N9oW8iorWL0e/39e4mcv71QOieX",
	"sF4n4PChVg4LyO4YeJfw6+aonX7DnDj2Z+esG+DBCOQd4dBX1njsEZLbAof443XhsHLo0ZAy81BaSAYJ",
	"zKzTkiADZej8bEuWMoRzdIxIo/dyPpi73RJxfXqY/ID4AyIC4G36ITJaSrPVQa17OPqwdv53ZqhipiEz",
	"PGuk47FGahyO5p3n4yun8iMJwlYvg5aN0rWGbJymaZqAVib+5+e6JFWV+NsMsvQ0HW/uM7WeIuvRnMzt",
	"Sbs4K62kywtG8VBLQ4qWRyoJ0YwkovBCFgUWgux+j+xC6ZsorrykgW755GDTBLbbVMke0o7JnVqO2+m2",
	"hdIvlQO2hUICaLigOzhruDXOm3NI4KK5gAQ+NB8ggcvmEhL42HyEBD41n35iIEsntTJNcPa8e/T3+DTl",
	"34daOjwZQwJ5afN7SMDSAt0O3E23sDfNzDJUUsRt0BYgPkuSpZ2LP9E9xrIf0flYR3qano65WFuhkZWC",
	"DM5Px6cpQ5O0CO0zmm6mbWV9+OXukkzFpIAMPjuUhL/i03WnLouBnq5tsYzDxhAagszUZZkcnaNk2Sw9",
	"q7xqnDKWOAJDirN0vAdoBbKqSpWHYkbffJwQMelzV7bVBur7JUX44kl6kQd+CgjnZrIu6c0wxPk/AGHz",
	"BrB5XjvuCz7ja62lW240E1IYfOqo5hOt2KOVKtbR9iUS9jW/CesbwSvppEZC5yG7e8mLllVuc7NxIQt+",
	"69o2iy287WlyNSY7nBy6/2tP54vhpt2RJV7/vmSJtArZ4ZwuxeSGEc5xoPG+IL1OAYfkFD7+KA3Sf7XX",
	"3pWQX5AGVByen1dFMSHUt/Z1YvLs7Abp2wn63yB/34P8akf1jeN6o3y0il8pk7+f6n+gto8YJfjFWf3P",
	"DfkmBkxe8qUd5xjjHr6zK/zHvE9aDOyOCKIQM2f1LhPvyS1RYCE73AHrjmvW678CAAD//9AlTMd2DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
