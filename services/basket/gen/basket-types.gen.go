// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for PuzzleType.
const (
	Clock    PuzzleType = "clock"
	Megaminx PuzzleType = "megaminx"
	N2x2     PuzzleType = "2x2"
	N3x3     PuzzleType = "3x3"
	N4x4     PuzzleType = "4x4"
	N5x5     PuzzleType = "5x5"
	N6x6     PuzzleType = "6x6"
	N7x7     PuzzleType = "7x7"
	N8x8     PuzzleType = "8x8+"
	Other    PuzzleType = "other"
	Pyraminx PuzzleType = "pyraminx"
	Skewb    PuzzleType = "skewb"
	Square1  PuzzleType = "square-1"
)

// Basket A basket
type Basket struct {
	// Id The ID of the basket
	Id string `json:"id"`

	// Items The items in the basket
	Items []Puzzle `json:"items"`
}

// Error An error response
type Error struct {
	// Code A code representing the error
	Code int32 `json:"code"`

	// Message A message describing the error
	Message string `json:"message"`
}

// Puzzle defines model for Puzzle.
type Puzzle struct {
	// Description A description of the puzzle
	Description string `json:"description"`

	// Id The ID of the puzzle
	Id string `json:"id"`

	// Name The name of the puzzle
	Name string `json:"name"`

	// Price The price of the puzzle
	Price float64 `json:"price"`

	// Type The type of puzzle
	Type PuzzleType `json:"type"`
}

// PuzzleType The type of puzzle
type PuzzleType string

// CreateNewBasketJSONBody defines parameters for CreateNewBasket.
type CreateNewBasketJSONBody = []Puzzle

// AddItemToBasketJSONBody defines parameters for AddItemToBasket.
type AddItemToBasketJSONBody = []Puzzle

// CreateNewBasketJSONRequestBody defines body for CreateNewBasket for application/json ContentType.
type CreateNewBasketJSONRequestBody = CreateNewBasketJSONBody

// AddItemToBasketJSONRequestBody defines body for AddItemToBasket for application/json ContentType.
type AddItemToBasketJSONRequestBody = AddItemToBasketJSONBody

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTXPbNhD9K5htb4UlynacDG923GZ0aTutb54cIHIlISY+AoA2FY3+e2cBkpIlKnFr",
	"p+PO9EQKwC7e7nv7xDUURlmjUQcP+Rp8sUQl4uuV8HcY6K1EXzhpgzQacrhks7TDwTpj0QWJMUCWh4dv",
	"lsim18zMWVjiNjCsLEIOPjipF7DhIAMqPxwet5jUjzP0AT86nEMOP4y3hYzbKsa/11++VEj52wuFc2IF",
	"mw0Hh59r6bCE/JaAdwk/9kfN7BMWgWJ/ds64gT5ohrTDHHprtMeDhhSmxKH+0TpzaB161EHqRSwtJgMO",
	"c+OUCJCD1OHsdNssqQMu0BEihd6LxWDudoul9dl+8r3G7zUiAt6mH2pG29J8vVfrIxyHsHZ+d2KwKdOQ",
	"GL4ppOOxWigcjqadb8dbJ4sjCeLWQQYlGqlqBfkky7KMg5I6/ab3ugrSVvjbHPJslE36+3StZkh8NCcL",
	"c9IuzisjwsX5Vq5PEfcNnRwUdOxEm4o/Kqer8ji/N+39h02gAOpBXz9qKvYWThvS6llzBhzOm3Pg8KZ5",
	"Axwumgvg8LZ5CxzeNe9+ottXTiipmyi1Rffq7/BhRs/PtXB4MgEORWWKO+BgwhLdDtxeviQWPTcENchA",
	"umwLYO9FEJVZsD/R3VOtHO7R+VRHNspGEyrWWNTCSsjhbDQZZQRNhGXU83jW2581Pj5J7oJaMS0hh/cO",
	"RcBf8eGqsyRiAH24MuUqTb8OqGOksLaSRYwdf/JpQhKN0TefZWUbftQzg2GiLOmxY51RKsmw4qWn2eRv",
	"of0ayLYVR0AlAOxBeFbE5pUQz81FXYUXw5DcegBC79emKGpHk0JnfK2UcKueUCaYxoe+WRveKWG8luUm",
	"zUSFAQ8FcR3XezVY4YTCgM5DfvuUv0Xiqc1NqoY8irEb5DwN9XbKg6uR7/RkfzQ+HvB8PjzRO7Sk618X",
	"LamtTHQ4Zys2vSaECxyYyg8YnseAw+Ak3n8vDrJ/ddZeFZEfMAywOGyul2U5DahuzPPIJPfrrPDlCP3f",
	"5f/DLn+5I4lejgc+P16n75vp1y3/D1TmHhNpvzij/rlaX0Sd/CkfzcnkCPfwnV3h3+fPpsVA6kggSjZ3",
	"Ru1J99WoJRHMRIc7Yt1RzWbzVwAAAP//t5K8qUEPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
