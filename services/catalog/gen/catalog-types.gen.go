// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for PuzzleType.
const (
	Clock    PuzzleType = "clock"
	Megaminx PuzzleType = "megaminx"
	N2x2     PuzzleType = "2x2"
	N3x3     PuzzleType = "3x3"
	N4x4     PuzzleType = "4x4"
	N5x5     PuzzleType = "5x5"
	N6x6     PuzzleType = "6x6"
	N7x7     PuzzleType = "7x7"
	N8x8     PuzzleType = "8x8+"
	Other    PuzzleType = "other"
	Pyraminx PuzzleType = "pyraminx"
	Skewb    PuzzleType = "skewb"
	Square1  PuzzleType = "square-1"
)

// Error An error response
type Error struct {
	// Code A code representing the error
	Code int32 `json:"code"`

	// Message A message describing the error
	Message string `json:"message"`
}

// NewPuzzle A new puzzle
type NewPuzzle struct {
	// Description A description of the puzzle
	Description string `json:"description"`

	// Name The name of the puzzle
	Name string `json:"name"`

	// Price The price of the puzzle
	Price float32 `json:"price"`

	// Quantity The number of puzzles available
	Quantity int `json:"quantity"`

	// Type The type of puzzle
	Type PuzzleType `json:"type"`
}

// Puzzle defines model for Puzzle.
type Puzzle struct {
	// Description A description of the puzzle
	Description string `json:"description"`

	// Id The ID of the puzzle
	Id string `json:"id"`

	// Name The name of the puzzle
	Name string `json:"name"`

	// Price The price of the puzzle
	Price float32 `json:"price"`

	// Quantity The number of puzzles available
	Quantity int `json:"quantity"`

	// Type The type of puzzle
	Type PuzzleType `json:"type"`
}

// PuzzleList A list of puzzles
type PuzzleList = []Puzzle

// PuzzleType The type of puzzle
type PuzzleType string

// PuzzleUpdate An update to a puzzle
type PuzzleUpdate struct {
	// Description A description of the puzzle
	Description *string `json:"description,omitempty"`

	// Name The name of the puzzle
	Name *string `json:"name,omitempty"`

	// Price The price of the puzzle
	Price *float32 `json:"price,omitempty"`

	// Quantity The number of puzzles available
	Quantity *int `json:"quantity,omitempty"`

	// Type The type of puzzle
	Type *PuzzleType `json:"type,omitempty"`
}

// AddPuzzleJSONRequestBody defines body for AddPuzzle for application/json ContentType.
type AddPuzzleJSONRequestBody = NewPuzzle

// UpdatePuzzleJSONRequestBody defines body for UpdatePuzzle for application/json ContentType.
type UpdatePuzzleJSONRequestBody = PuzzleUpdate

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXS2/jNhD+K8S0t7Kx89gHdEuboghQtAGanoIcaHFsc1ciGZJK5A3034shZct6uEna",
	"tJtDT6E51DfD+eabYR4hN6U1GnXwkD2Cw7sKffjBSIVx41d8uKq+fCmQfuRGB9SBlsLaQuUiKKNnn7zR",
	"tOfzNZaCVt86XEIG38w69Fmy+lmH2DQNjx6VQwlZcBU2HJLxDytFeD2nPdApvw1vkeKtf3LOOFpI9LlT",
	"ljxCBueaIVmYQ2+N9ggcrDMWXWjTlRuJE98x2mcOrUOPOii9YmGNCQw4LI0rRYAMlA6nJ8AhbCymn7hC",
	"Bw2HEr0Xq0ns1sTS/mII3mL54JReQf/qNyngDv52d94sPmEeyHWvBIbONT4wm6zDXPSOjr/c+83MMoa8",
	"AxrEzEGLcsL99RoZWZ7+3jqVHwCIphFCqbQqqxKy+Q5NV+UikXFXCR1U2ByIKJ4jxITmmbgXqhCLQ8B7",
	"NKed59TyNZ0cshnT1KLwXmjbFOwFP8V1R7Qoit+WkN08W8z8sReKknBLe/2aUHI6Z5cXT3HYNLd8VEPD",
	"w8OL/KJ8mKq9QvmwRxBwUAFL/7zMdzyBcE5sOnfXLXvj+9H5ziFwQE01cAMnNen9tD4FDmf1GXB4V78D",
	"Du/r98DhQ/0BOHysP35HBG6cKJWuo1xX26X/jA8L+ntXCYffHwOHvDD5Z+BgwhrdHs2dHIY9dtTmqmhi",
	"wTDxv7y/qrwHlU1bSi8NoQQVSKstm+xHEURhVux3dPdJ6vfofAp8fjQ/OqYIjEUtrIIMTo+Oj+bEqgjr",
	"SOgsTwC0XmHUDfEdx+2lhAx+xnC1E8x2BMZPT+bzF43qF6gtSnikOErDU6KOM70qS+E2KXgmiqKzcrDG",
	"T9zyXMqrbZl0z6HNoWh7L6ZePxym6PiVXzNTWbjeFTl7EJ4JKVFCPLUUVRFeLYL0QJqiYftEMnleOZoF",
	"fRrOpWRi/9VA5m3lzR6VbJLqCkydqc/NRdzf0WOFEyUGdD4OqqfHCjW0FptkBFmsftg2IBpPw5ch38vI",
	"cCTdjjg+O9CEOkqS+7dFSkrrrtWzxYZdXlCEf90G/i4DDoNTeP9vcTD/T3X2poiMTW7Eoq0mWEzD/58R",
	"mV4Jr0fjC5tt/5+6r1wHUdwpIW9L3Ck/o7JomubPAAAA//+8rerV/Q8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
