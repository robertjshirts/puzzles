// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for PuzzleType.
const (
	Clock    PuzzleType = "clock"
	Megaminx PuzzleType = "megaminx"
	N2x2     PuzzleType = "2x2"
	N3x3     PuzzleType = "3x3"
	N4x4     PuzzleType = "4x4"
	N5x5     PuzzleType = "5x5"
	N6x6     PuzzleType = "6x6"
	N7x7     PuzzleType = "7x7"
	N8x8     PuzzleType = "8x8+"
	Other    PuzzleType = "other"
	Pyraminx PuzzleType = "pyraminx"
	Skewb    PuzzleType = "skewb"
	Square1  PuzzleType = "square-1"
)

// Error defines model for Error.
type Error struct {
	// Code A code representing the error
	Code int32 `json:"code"`

	// Message A message describing the error
	Message string `json:"message"`
}

// NewPuzzle defines model for NewPuzzle.
type NewPuzzle struct {
	// Description A description of the puzzle
	Description string `json:"description"`

	// Name The name of the puzzle
	Name string `json:"name"`

	// Price The price of the puzzle
	Price float32 `json:"price"`

	// Quantity The number of puzzles available
	Quantity int        `json:"quantity"`
	Type     PuzzleType `json:"type"`
}

// Puzzle defines model for Puzzle.
type Puzzle struct {
	// Description A description of the puzzle
	Description string `json:"description"`

	// Id The unique identifier for a puzzle (UUID)
	Id string `json:"id"`

	// Name The name of the puzzle
	Name string `json:"name"`

	// Price The price of the puzzle
	Price float32 `json:"price"`

	// Quantity The number of puzzles available
	Quantity int        `json:"quantity"`
	Type     PuzzleType `json:"type"`
}

// PuzzleList The type of puzzle
type PuzzleList = []Puzzle

// PuzzleType defines model for PuzzleType.
type PuzzleType string

// AddPuzzleJSONRequestBody defines body for AddPuzzle for application/json ContentType.
type AddPuzzleJSONRequestBody = NewPuzzle

// UpdatePuzzleJSONRequestBody defines body for UpdatePuzzle for application/json ContentType.
type UpdatePuzzleJSONRequestBody = NewPuzzle

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVy27jNhT9FeK2ixZlY+cxD2iXNkURoGgHaLIaZEGLVzY7EsmQlC1PoH8vLimPLEue",
	"R+sZZGXqkj48POc+niA3lTUadfCQPYHDxxp9+MVIhTHwJ27e1O/fl0gfudEBdaClsLZUuQjK6Nk/3miK",
	"+XyFlaDV9w4LyOC7WY8+S7t+1iO2bcvjjcqhhCy4GinSHSSc35wzjhbWGYsudKRyIyMfiT53yhIJyOCa",
	"UZw5tA496qD0koUVMowgHArjKhEgA6XD5QVwCFuL6ROX6KDlUKH3YjmJ3W2xFF8cgndYPjillzB82NtE",
	"uId/aPlQ2OHzBlePmex9M1NEFjYhjWhw0KKaeM7dChntfPr/1qn8CEDcOoag62qRNH2shQ4qbI+wiOcI",
	"JSF4JtZClWKxD7bnUIp8PMOSrnd08tCIKEeHwgd0dk/dI0w29R6JsvyrgOztZ2c3P/RVyWkNaq0ea2RK",
	"UtIWCh0rjGOiU4T9cH9/e/PjJ3NMSXhoe8p/KB+mryOYXnDgoAJW/vNE7S0A4ZzYwof77jpjUNcV0blo",
	"qMQum0vgcNVcAYcXzQvg8LJ5CRxeNa+Aw+vm9U8k/NaJSukmVshyt/TvcLOg38daOPz5HDjkpcnfAQcT",
	"VujgYaxIy0HpwhCPoAL51rFjv4ogSrNkf6NbJ5vX6HwSZX42PzunlxiLWlgFGVyenZ/NiZoIqyjNLE8A",
	"tF5iVJasjQ3wVkIGv2NIV3kgX7w12ifbL+bzL2qeX2BHNHlkCclw2DRK5cNelcXs8XVVCbdN5Jkoy36X",
	"gzV+4pXXUr7ZpU0/K7bH2A7GyaA2DiU6P9l82R8uE00rpcNGeCakRAnxVCHqMpyMQZpaUzboNC+YyfPa",
	"Ud0ObbiWkgmmcbOrTdreZd7sSck2VXSJAcfe3MT4B3uscKLCgM7HpjWW4vZm2LxZMKzDpjKCLGY/7GYI",
	"NZjDcc33FDmsxYeRx1dH5khvSbr+eZmSZO3b8WLLbm+I4cfbwH91wGFwCtdfy4P5N62zZ2VkbHIjF209",
	"4eK9leL/llIdMU5n4wmb7fzbN9ukxvOq7OTyKCfatv03AAD//wkAtE8XDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
