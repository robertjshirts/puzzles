// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for PuzzleType.
const (
	Clock    PuzzleType = "clock"
	Megaminx PuzzleType = "megaminx"
	N2x2     PuzzleType = "2x2"
	N3x3     PuzzleType = "3x3"
	N4x4     PuzzleType = "4x4"
	N5x5     PuzzleType = "5x5"
	N6x6     PuzzleType = "6x6"
	N7x7     PuzzleType = "7x7"
	N8x8     PuzzleType = "8x8+"
	Other    PuzzleType = "other"
	Pyraminx PuzzleType = "pyraminx"
	Skewb    PuzzleType = "skewb"
	Square1  PuzzleType = "square-1"
)

// Error An error response
type Error struct {
	// Code A code representing the error
	Code int32 `json:"code"`

	// Message A message describing the error
	Message string `json:"message"`
}

// NewPuzzle A new puzzle
type NewPuzzle struct {
	// Description A description of the puzzle
	Description string `json:"description"`

	// Name The name of the puzzle
	Name string `json:"name"`

	// Price The price of the puzzle
	Price float64 `json:"price"`

	// Quantity The number of puzzles available
	Quantity int `json:"quantity"`

	// Type The type of puzzle
	Type PuzzleType `json:"type"`
}

// Puzzle defines model for Puzzle.
type Puzzle struct {
	// Description A description of the puzzle
	Description string `json:"description"`

	// Id The ID of the puzzle
	Id string `json:"id"`

	// Name The name of the puzzle
	Name string `json:"name"`

	// Price The price of the puzzle
	Price float64 `json:"price"`

	// Quantity The number of puzzles available
	Quantity int `json:"quantity"`

	// Type The type of puzzle
	Type PuzzleType `json:"type"`
}

// PuzzleList A list of puzzles
type PuzzleList = []Puzzle

// PuzzleType The type of puzzle
type PuzzleType string

// PuzzleUpdate An update to a puzzle
type PuzzleUpdate struct {
	// Description A description of the puzzle
	Description *string `bson:"description,omitempty" json:"description,omitempty"`

	// Name The name of the puzzle
	Name *string `bson:"name,omitempty" json:"name,omitempty"`

	// Price The price of the puzzle
	Price *float64 `bson:"price,omitempty" json:"price,omitempty"`

	// Quantity The number of puzzles available
	Quantity *int `bson:"quantity,omitempty" json:"quantity,omitempty"`
}

// AddPuzzleJSONRequestBody defines body for AddPuzzle for application/json ContentType.
type AddPuzzleJSONRequestBody = NewPuzzle

// UpdatePuzzleJSONRequestBody defines body for UpdatePuzzle for application/json ContentType.
type UpdatePuzzleJSONRequestBody = PuzzleUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all puzzles
	// (GET /catalog)
	GetPuzzles(c *gin.Context)
	// Add a new puzzle
	// (POST /catalog)
	AddPuzzle(c *gin.Context)
	// Delete a puzzle by ID
	// (DELETE /catalog/{id})
	DeletePuzzle(c *gin.Context, id string)
	// Get a puzzle by ID
	// (GET /catalog/{id})
	GetPuzzle(c *gin.Context, id string)
	// Update a puzzle by ID
	// (PUT /catalog/{id})
	UpdatePuzzle(c *gin.Context, id string)
	// Check the health of the service
	// (GET /health)
	CheckHealth(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPuzzles operation middleware
func (siw *ServerInterfaceWrapper) GetPuzzles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPuzzles(c)
}

// AddPuzzle operation middleware
func (siw *ServerInterfaceWrapper) AddPuzzle(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddPuzzle(c)
}

// DeletePuzzle operation middleware
func (siw *ServerInterfaceWrapper) DeletePuzzle(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePuzzle(c, id)
}

// GetPuzzle operation middleware
func (siw *ServerInterfaceWrapper) GetPuzzle(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPuzzle(c, id)
}

// UpdatePuzzle operation middleware
func (siw *ServerInterfaceWrapper) UpdatePuzzle(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePuzzle(c, id)
}

// CheckHealth operation middleware
func (siw *ServerInterfaceWrapper) CheckHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckHealth(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/catalog", wrapper.GetPuzzles)
	router.POST(options.BaseURL+"/catalog", wrapper.AddPuzzle)
	router.DELETE(options.BaseURL+"/catalog/:id", wrapper.DeletePuzzle)
	router.GET(options.BaseURL+"/catalog/:id", wrapper.GetPuzzle)
	router.PUT(options.BaseURL+"/catalog/:id", wrapper.UpdatePuzzle)
	router.GET(options.BaseURL+"/health", wrapper.CheckHealth)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTVMjNxD9K6pObpHxGFh2yzeypBKqUglVISeKgzzTtrXMSELSwHip+e+plmyP54Ng",
	"spD1yRp9dD/1635qP0GqC6MVKu9g+gQW70t0/medSQwTf+DjVfn1a470kWrlUXkaCmNymQovtRp/cVrR",
	"nEuXWAga/WhxDlP4YdxYH8dVN24s1nXNg0dpMYOptyXWHOLi3yYT/u2ctowO+a352lK49S/WakuDDF1q",
	"pSGPMIVzxZBWmEVntHIIHIzVBq1fhyvVGQ6cYzTPLBqLDpWXasH8EqMx4DDXthAepiCVPzkGDn5lMH7i",
	"Ai3UHAp0TiwGba+XWJyfdY2vbTlvpVpA++o3EXBj/na7X8++YOrJdSsFus4VPjITV7uxaG3tn9z5Znoe",
	"IG8NdTBzUKIYcH+9REYrL583VqbPGAhLPQuFqGRRFjCdJEmScCikit80LnMvTY5/zmGaHCWTrT9VFjOk",
	"mFejhR6tJ+e5Fv7slFDcl0J56VfP3CScJiQRhWPiQchczCKgHQD99Igz+9TANe3sZkEI79oKb0HbhG4H",
	"/FCONAki8pzicrO3CPCnFhSZwS3NtXNJZsMxu7x4ifu6vuW93Otu7l7kd+n8UM7m0vkdgoCD9Fi4/SLf",
	"8ATCWrFq3F2v2evfj/Y3DoEDKsqBGziuSCdOqhPgcFqdAocP1QfgcFadAYeP1Ufg8Kn69BMRuLKikKoK",
	"Zb7YDN0dPs7o974UFkcT4JDmOr0DDtov0e7Q3JRRV5t78liGJeY1E+8uC1RmWhg5Ig1boBph5a0YebEI",
	"fmbhgdi1z3VBdBm/CgXwTZqyn3My1PF6AEq0H/aApgP+nQRsP0Ab5y1Mda+GaUqquaaTXnpSpXXess/C",
	"i1wv2F9oH6KoPaB18QLJUXI0oRzXBpUwEqZwcjQ5Sih/hV8GIOM0GqDxAoNCUGaHhuQygyn8iv5qKw2b",
	"JiEcPU6SVzUzr9CVIFY9baEwvCRfoespi0LYVQTPRJ43qxyMdgO3PM+yq012Ng3j6jm0rZ6ypfzdEE3e",
	"uN8bisL1trbYo3BMZBlmEHbNRZn7N0MQW8ghGjZNpE7T0tKr16bhPMuY2O2raHmTeeMnmdWx+nKMGtzm",
	"5iLMb+kxwooCPVoXnuSXH1CS7rVtKiPSAeGXsFFLeoi7vTPfiUj38b3tcXz6jPY1lET3h0VKDOv2UWOz",
	"Fbu8IIT/LgP/lQGL3kp8eC8Okv+1zg6KyCByPRZNOcBibHO+jcjYD70dja8U2/bf3u+cB6G4Y0AOq7hj",
	"fHppQbK7RJH75bPv/eclpne/xT3D0e0Hw8Xmg0nHovXVQQUjXClkcUS3yek1bDJZ/xMAAP//Wa+NeDYS",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
